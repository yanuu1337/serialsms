// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

//
// BETTER-AUTH SCHEMA
//

model User {
  id              String     @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  sessions        Session[]
  accounts        Account[]
  sms             Sms[]
  apiToken        ApiToken[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Sms {
  id        String      @id
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  senderId  String
  receiver  String
  sender    User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String?
  contact   SmsContact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String?

  @@map("sms")
}

model SmsContact {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  phoneNumber String
  userId      String
  Sms         Sms[]

  @@map("sms_contact")
}

model ApiToken {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  token     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appName   String?
  expiresAt DateTime?
  calls     Int       @default(0)
  maxCalls  Int?
  isActive  Boolean?  @default(true)
  isAdmin   Boolean?  @default(false)

  @@map("api_token")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//
// END BETTER-AUTH SCHEMA
//
